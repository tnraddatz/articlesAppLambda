# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

# Docs #
# This file contains lambda functions and their iam-roles
# CUSTOM INFO: https://medium.com/better-programming/set-up-a-ci-cd-pipeline-for-aws-lambda-with-github-actions-and-serverless-in-under-5-minutes-fd070da9d143
# CORS INFO: https://www.serverless.com/framework/docs/providers/aws/events/apigateway/#responses
# IAMROLE INFO: https://www.serverless.com/framework/docs/providers/aws/guide/iam/
# package.individually = true -- so functions are individually grouped, not compiled together. 
#

service: article-app

provider:
  name: aws
  runtime: python3.7
  region: us-east-1
  stage: prod

custom:
  pythonRequirements:
    dockerizePip: true

package:
  individually: true
  exclude:
    - package.json
    - package-log.json
    - node_modules/**

functions:
  post_article: #Update
    handler: index.main
    module: postArticle #Update
    events:
      - http:
          path: postArticle #Update
          method: post
          role: LambdaExecutionRoleArticleApp
          authorizer: aws_iam
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
          request: 
            passThrough: WHEN_NO_MATCH
            contentHandling: CONVERT_TO_TEXT
          response:
            passThrough: WHEN_NO_MATCH
            contentHandling: CONVERT_TO_TEXT
  list_articles: #Update
    handler: index.main
    module: listArticles #Update
    events:
      - http:
          path: listArticles #Update
          method: post
          role: LambdaExecutionRoleArticleApp
          authorizer: aws_iam
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
          request: 
            passThrough: WHEN_NO_MATCH
            contentHandling: CONVERT_TO_TEXT
          response:
            passThrough: WHEN_NO_MATCH
            contentHandling: CONVERT_TO_TEXT

resources:
  Resources:
    DynamoDbExecutionRole:
      Type: AWS::IAM::Role
      Properties: 
        RoleName: LambdaExecutionRoleArticleApp
        AssumeRolePolicyDocument: 
          Version: '2012-10-17'
          Statement: 
            - Effect: Allow
              Principal: 
                Service: 
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Path: "/article_app/"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies: 
          - PolicyName: DynamoDbExecutionRolePolicy
            PolicyDocument: 
              Version: '2012-10-17'
              Statement: 
                - 
                  Effect: Allow
                  Action: 
                    - dynamodb:PutItem
                    - dynamodb:Scan
                    - dynamodb:Query
                  Resource: arn:aws:dynamodb:us-east-1:115927972738:table/DynamoDevNewsTable
          - PolicyName: LambdaLoggingArticleAppPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                -  Effect: "Allow"
                   Action:
                     - "s3:PutObject"
                   Resource:
                     Fn::Join:
                       - ""
                       - - "arn:aws:s3:::"
                         - "Ref" : "ServerlessDeploymentBucket"

plugins:
  - serverless-python-requirements